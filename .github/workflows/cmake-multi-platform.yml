# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-24.04, windows-latest]
        build_type: [Debug, Release, RelWithDebInfo]
        c_compiler: [clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-24.04
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-24.04
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive # Check out submodules

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "scripts-dir=${{ github.workspace }}/scripts" >> "$GITHUB_OUTPUT"
        
    - name: Choose Clang version (for Linux)
      if: runner.os == 'Linux'
      run: |
          echo "C=clang-18" >> $GITHUB_ENV
          echo "CXX=clang++-18" >> $GITHUB_ENV

    - name: Run (Linux-specific) script for apt-get
      if: runner.os == 'Linux'
      run: |
        chmod +x ${{ steps.strings.outputs.scripts-dir }}/fetch_apt_get.sh
        ${{ steps.strings.outputs.scripts-dir }}/fetch_apt_get.sh

    - name: Set up dependencies with custom script
      shell: bash
      run: |
        # Convert Windows path to Unix path for Bash (ensures Windows compatibility)
        scripts_dir="${{ steps.strings.outputs.scripts-dir }}"
        scripts_dir_unix=$(echo "$scripts_dir" | sed 's/\\/\//g')
        vcpkg_script="${scripts_dir_unix}/vcpkg.sh"
        vcpkg_script_unix=$(echo "$vcpkg_script" | sed 's/\\/\//g')
        vcpkg_dir="${{ github.workspace }}/vcpkg"
        vcpkg_dir_unix=$(echo "$vcpkg_dir" | sed 's/\\/\//g')
        
        # Make the script executable
        chmod +x "$vcpkg_script_unix"
        
        # Conditionally set the triplet based on the OS
        if [ "${{ matrix.os }}" == "ubuntu-24.04" ]; then
          triplet="x64-linux"
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          triplet="x64-windows"
        else
          echo "Error: Unsupported OS '${{ matrix.os }}'. Supported OSes are ubuntu-24.04 and windows-latest."
          exit 1
        fi
        
        # Run the script
        "$vcpkg_script_unix" $triplet https "$vcpkg_dir_unix"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_CXX_FLAGS="-std=c++23 -stdlib=libc++"
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

#    - name: Test
#     working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#      run: ctest --build-config ${{ matrix.build_type }}
